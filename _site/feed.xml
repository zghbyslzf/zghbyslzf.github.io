<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Maya Blog</title>
    <description>A bug chasing dreams.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 02 Mar 2019 16:57:18 +0800</pubDate>
    <lastBuildDate>Sat, 02 Mar 2019 16:57:18 +0800</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>翻译：没有那个是错的</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;为了提高英语水平，会去翻译一些国外的文章!&lt;/p&gt;

&lt;h2 id=&quot;提示&quot;&gt;提示&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;水平有限，轻喷！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;原文链接&quot;&gt;原文链接&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://css-tricks.com/nobody-is-quite-wrong/&quot;&gt;点击&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;译文&quot;&gt;译文&lt;/h2&gt;

&lt;p&gt;我发现，在我们的行业中，关于使用浏览器不支持的新web特征,有两种截然不同的观点：&lt;/p&gt;

&lt;p&gt;　　1、网站不需要在所以的浏览器中看起来都一样。渐进增强的概念能够对这种观点有些帮助，有一些使用编程语言的工具能够帮助我们实现这一点。
　　
　　2、如果浏览器支持不是我想要的，那么它看上去只是一个异国风情的演示，而不应该被使用。
我不会很肯定的说某一个观点比另外一个更正确。&lt;/p&gt;

&lt;p&gt;我认为，我支持1的观点并不另人奇怪。设计和实现在不同浏览器和条件下表现不同的东西是完全可能的。这就是现在互联网上的响应式设计。&lt;/p&gt;

&lt;p&gt;渐进增强的基础在于我们可以在任何地方开始工作，尽可能的从设计与功能上进行分离。甚至有一些编程语言特征支持这个想法，@supports规则允许我们写css的时候判断是否支持这个特性，如果支持就执行，不支持，就不执行。&lt;/p&gt;

&lt;p&gt;这个是整个使用的上面的例子的库Modernizr，它在github上有22804个星星。（现在不止这个数）
我不想针对渐进增强去争论些什么。记住，我刚才说过我支持这个想法，但我确实对于那些不去尝试渐进增强的人和团队表示同情，最终产生了更多偏向于2的想法。&lt;/p&gt;

&lt;p&gt;开发和设计适应不同场合的功能需要花费大量的工作。这些工作绝对非常有用，或者也不太有用。不过，它确实能够使事情复杂化，这表示更多的代码，需要更多的精力和测试，并且很难去理解。这是技术债务。&lt;/p&gt;

&lt;p&gt;让我们更进一步去考虑一下：technical debt can be fine，技术债务是好的，甚至可以故意使用它。它存在于我们构建的所有项目中，我的观点是，合理聪明的承担一点技术债务能够在以后更好的维护你的项目。&lt;/p&gt;

&lt;p&gt;你可能认为，建立在渐进增强上的技术债务比较小，因为我搭建项目的基础比较牢固，以至于只需要少量的测试和不断的完善就行了。也许吧！&lt;/p&gt;

&lt;p&gt;我确实像是观点2。它使你感觉更安全，它使你感觉更加有责任心和谨慎。“嗨，那真是整洁”你会想到“我会在几年后再去看看（渐进增强），看是否能在项目中使用”。&lt;/p&gt;

&lt;p&gt;我可能和你争辩：1、这个玩笑并不有趣，2、你的想法是错误的。这使你不愿意接受渐进增强的方法，最终会导致你的代码变得脆弱。&lt;/p&gt;

&lt;p&gt;这两种观点并没有那个是错的，采用那种观点，依赖于你的想法，依赖于技术债务的重量，依赖于团队和开发者的流失率，依赖于文档，依赖于正确的测试方法！&lt;/p&gt;

&lt;p&gt;你写项目的时候有想到这些吗？&lt;/p&gt;

</description>
        <pubDate>Sat, 08 Dec 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/12/08/%E7%BF%BB%E8%AF%91-%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B8%AA%E6%98%AF%E9%94%99%E7%9A%84/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/12/08/%E7%BF%BB%E8%AF%91-%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B8%AA%E6%98%AF%E9%94%99%E7%9A%84/</guid>
        
        <category>翻译</category>
        
        
      </item>
    
  </channel>
</rss>
